Справочная информация
В языке Java, как и в других языках программирования, есть условные конструкции и операторы, которые позволяют
развивать логику программы и задавать различные направления для передачи данных по программе.
Для начала давайте посмотрим как можно сравнить две переменные имеющих числовое значение:

int a = 12;
int b = -5;
boolean c = a == b;         // false
boolean d = a == 12;       // true
Мы объявляем две целочисленные переменные a и b, и присваиваем им значения.
Далее мы создаем переменную c логического типа и присваиваем ей результат выражения a==b.
Два знака "=" означают оператор проверки на равенство. Если a и b равны по значению,
тогда переменная c будет равна true (правда), в противном случае она будет иметь значение false (ложь).
В примере выше мы имеем два выражения, одно из которых истина, а второе - ложь.

int a = 12;
int b = -5;
boolean c = a != b;         // true
boolean d = a != 12;       // false
Оператор обратный проверке на равенство: != - оператор проверки на неравенство, результат true говорит, что числа не равны друг другу.

int a = 12;
int b = -5;
boolean c = a < b;         // false
boolean d = a < 13;       // true
Оператор < проверяет на то, что число, стоящее слева от оператора, меньше числа справа.

int a = 12;
int b = -5;
boolean c = a > b;         // true
boolean d = a > 13;       // false
Оператор обратный предыдущему. Говорит о том, что число слева больше.

int a = 12;
int b = -5;
boolean c = a <= b;         // false
boolean d = a <= 12;       // true
Оператор <= меньше или равно

int a = 12;
int b = -5;
boolean c = a >= b;         // true
boolean d = a >= 11;       // false
Оператор >= больше или равно

Помимо операторов сравнения, в Java есть логические операторы:

|
c=a|b; //(c равно true, если либо a, либо b (либо и a, и b) равны true, иначе c будет равно false)
&
c=a&b; //(c равно true, если и a, и b равны true, иначе c будет равно false)
!
c=!b; //(c равно true, если b равно false, иначе c будет равно false)
^
c=a^b; //(c равно true, если либо a, либо b (но не одновременно) равны true, иначе c будет равно false)
||
c=a||b; //(c равно true, если либо a, либо b (либо и a, и b) равны true, иначе c будет равно false)
&&
c=a&&b; //(c равно true, если и a, и b равны true, иначе c будет равно false)
Конструкция if-else позволяет выстраивать в программах различную логику выполнения операций.
Другими словами, конструкция проверяет выражение на выполнимость, если выражение выполняется с результатом true,
тогда выполняется определенная последовательность действий, в противном случае может выполняться другая последовательность действий:

int num1 = 12;
int num2 = 15;
if(num1>num2){
    System.out.println("num1 больше num2");
}
На примере выше показано, что, если выражение (num1>num2) правда, тогда выполняется команда,
записанная внутри фигурных скобок. Если выражение ложно, тогда в данном примере ничего не произойдет.

int num1 = 12;
int num2 = 15;
if(num1>num2){
    System.out.println("num1 больше num2");
}
else{
    System.out.println("num2 больше num1");
}
Добавив else, мы можем добавить инструкций на случай, если выражение ложно. В таком случае наша программа будет
выводить сообщение при любых значениях num1 и num2.

int num1 = 12;
int num2 = 15;
if(num1>num2){
    System.out.println("num1 больше num2");
}
else if(num1<num2){
    System.out.println("num2 больше num1");
}
else{
    System.out.println("num1 и num2 равны");
}
связка else if позволяет нам прописывать сколько угодно вариантов для выполнения программы и проверять всевозможные варианты.
Важно отметить что в рамках одной конструкции может быть только один if (точка входа в эту конструкцию) и один else (точка выхода),
комбинаций else if между ними, как на примере выше, может быть сколько угодно.

Используя логические операторы мы можем записывать больше одного условия:

int num1 = 12;
int num2 = 15;
if(num1>num2 || num1<num2){
    System.out.println("num1 не равно num2");
}
В качестве самостоятельного изучения посмотрите конструкцию switch - case, она аналогична конструкции if-else.

Ранее в курсе попадались задания, где необходимо вывести одну фразу несколько раз. Чтобы не записывать одно и то же
выражение повторно можно использовать циклы. Циклы помогают нам выполнять некую операцию столько раз подряд, сколько нам это надо.

for (int i = 1; i < 9; i++){
    System.out.printf("Квадрат числа %d равен %d \n", i, i * i);
}
Цикл for работает по счетчику до тех пор, пока выполняется условие. На примере выше мы инициализируем целочисленный
счетчик int i = 1, далее записываем условие, что операция printf будет выполняться до тех пор, пока i < 9.
Третьим параметром мы записываем увеличение счетчика. Если его не будет, то наш цикл будет выполняться бесконечно
(на самом деле то тех пор, пока не закончится память у компьютера, но результат мы все равно никогда не получим).

Мы можем запускать более сложные циклы сразу с несколькими переменными:

int n = 10;
for(int i=0, j = n - 1; i < j; i++, j--){

    System.out.println(i * j);
}
Помимо for в Java имеется цикл do-while. Он сперва выполняет инструкцию, а потом проверяет
условие и работает до тех пор, пока условие true:

int j = 7;
do{
    System.out.println(j);
    j--;
}
while (j > 0);
Операция вывода сообщения будет производиться до тех пор, пока j не станет = 0.
Особенность do заключается в том, что при любых условиях инструкция будет выполнена
хотя бы один раз. То есть, если в примере выше j будет равно -350,
то println все равно выполнится один раз, а уже потом, while проверит условие
и прекратит цикл.

В отличии от цикла do, цикл while сразу проверяет условие:

int j = 6;
while (j > 0){

    System.out.println(j);
    j--;
}
В циклах могут участвовать операторы break и continue. Оператор break позволяет досрочно
завершить цикл, даже, если он не прошел по всем значениям счетчика:

for (int i = 0; i < 10; i++){
    if (i == 5)
        break;
    System.out.println(i);
}
Оператор continue позволяет пропускать инструкции при определнных значениях счетчика:

for (int i = 0; i < 10; i++){
    if (i == 5)
        continue;
    System.out.println(i);
}
В тот момент, когда счетчик будет равен 5, оператор continue скажет программе пропустить операции в цикле и
просто перейти к следующему числу. То есть наша программа выведет все числа на экран, кроме числа 5.

На этом мы завершим справочную информацию для данного Эпизода. До встречи в следующем Эпизоде!